{
    "Behavioral-Responses": {
        "name": {
            "value": "Behavioral-Responses",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>Partial-equilibrium behavioral-responses module that works with Tax-Calculator</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Behavioral-Responses, which is part of the Policy Simulation Library (PSL) collection of USA tax models, estimates partial-equilibrium behavioral responses to changes in the US federal individual income and payroll tax system as simulated by Tax-Calculator.  It provides two ways of doing this: (1) the <code>response</code> function, which contains higher-level logic that supports the Tax-Brain \"Partial Equilibrium Simulation\" capability and requires specification of only the elasticities, and (2) the <code>quantity_response</code> function, which contains lower-level logic that requires specification of the quantity whose response is to be estimated, requires specification of the marginal tax rates and elasticities to be used in the response calculation, and allows the response estimation to be conducted by subgroup with different elasticities for each subgroup.</p>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Please cite the source of your analysis as \"Behavioral-Responses release #.#.#, author's calculations.\" If you wish to link to Behavioral-Responses, https://PSLmodels.github.io/Behavioral-Responses/ is preferred. Additionally, we strongly recommend that you describe the elasticity parameters used, and provide a link to the materials required to replicate your analysis or, at least, note that those materials are available upon request.</p>"
        },
        "license": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/LICENSE.md",
            "value": "<p>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication</p>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://PSLmodels.github.io/Behavioral-Responses/index.html\">http://PSLmodels.github.io/Behavioral-Responses/index.html</a>"
        },
        "user_changelog": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md",
            "value": "<p>Go <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pulls?q=is%3Apr+is%3Aclosed\">here</a> for a complete commit history.</p> <h5>2020-09-22 Release 0.11.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/76\">#76</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li> <p>Compatibility with Python 3.8.    [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/74\">#74</a>   by Jason DeBacker]</p> </li> <li> <p>Test results updated for Tax-Calculator 3.0.0.    [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/74\">#74</a>   by Jason DeBacker]</p> </li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-10-31 Release 0.10.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/71\">#71</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>New capabilities for estimating differential behavioral responses   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/58\">#58</a>   by Max Ghenis]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-06-08 Release 0.9.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/63\">#63</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Use new Tax-Calculator 2.3 Records interface to get dump variables   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/63\">#63</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-05-13 Release 0.8.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/62\">#62</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Simplify extraction of variables from Calculator objects in <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/62\">#62</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-03-17 Release 0.7.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/52\">#52</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Simplify elasticities argument of the <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/51\">#51</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-02-22 Release 0.6.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/46\">#46</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Require taxcalc package for Tax-Calculator 1.0 or higher   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/46\">#46</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li> <p>Add optional dump argument to the <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/39\">#39</a>   by Martin Holmer responding to request by Matt Jensen and Anderson Frailey]</p> </li> <li> <p>Add <code>quantity_response</code> function that was formerly a Tax-Calculator utility function and that provides a lower-level behavioral response capability   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/43\">#43</a>   by Martin Holmer responding to suggestion by Max Ghenis]</p> </li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-12-14 Release 0.5.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/35\">#35</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Make behresp packages available for Python 3.7 as well as for Python 3.6   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/35\">#35</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-12-13 Release 0.4.1</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/33\">#33</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Add GitHub Travis-CI testing under Python 3.7   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/33\">#33</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-13 Release 0.4.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/21\">#21</a>)</p> <p><strong>API Changes</strong></p> <ul> <li> <p>Change documentation to state that Behavioral-Responses <code>behresp</code> packages are available <strong>only</strong> via the <code>PSLmodels</code> Anaconda Cloud channel   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/20\">#20</a>   by Martin Holmer]</p> </li> <li> <p>Remove <code>versioneer.py</code> and <code>taxcalc/_version.py</code> and related code now that Package-Builder is handling version specification   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/21\">#21</a>   by Martin Holmer]</p> </li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-06 Release 0.3.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/18\">#18</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Simplify specification of package dependencies   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/18\">#18</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-03 Release 0.2.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/15\">#15</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Make specification of required package versions comply with style in conda cheat sheet   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/15\">#15</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-01 Release 0.1.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/11\">#11</a>)</p> <p><strong>API Changes</strong></p> <ul> <li> <p>Copy Tax-Calculator top-level files to Behavioral-Responses repo   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/2\">#2</a>   by Martin Holmer]</p> </li> <li> <p>Move Tax-Calculator Behavior class logic/tests to Behavioral-Responses repo   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/3\">#3</a>   by Martin Holmer]</p> </li> <li> <p>Streamline tests to use less memory   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/8\">#8</a>   by Martin Holmer with assistance from Matt Jensen]</p> </li> <li> <p>Add user documentation for Behavioral-Responses package   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/11\">#11</a>   by Martin Holmer]</p> </li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul>"
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Results will change as the underlying models improve. A fundamental reason for adopting open source methods in this project is so that people from all backgrounds can contribute to the models that our society uses to assess economic policy; when community-contributed improvements are incorporated, the model will produce different results.</p>"
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>If you want to <strong>report a bug</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think is wrong with Behavioral-Responses.</p> <p>If you want to <strong>request an enhancement</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think should be added to Behavioral-Responses.</p> <p>If you want to <strong>propose code changes</strong>, follow the directions in the <a href=\"https://github.com/PSLmodels/Tax-Calculator/blob/master/CONTRIBUTING.md#tax-calculator-contributor-guide\">Tax-Calculator contributor guide</a> on how to fork and clone the Behavioral-Responses git repository. Before developing any code changes be sure to read completely the Tax-Calculator contributor guide and then read about the <a href=\"https://github.com/PSLmodels/Tax-Calculator/blob/master/WORKFLOW.md#tax-calculator-pull-request-workflow\">Tax-Calculator pull-request workflow</a>. When reading both documents, be sure to mentally substitute Behavioral-Response for Tax-Calculator and behresp for taxcalc.</p> <p>The Behavioral-Responses <a href=\"https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md#tax-calculator-release-history\">release history</a> provides a high-level summary of past pull requests and access to a complete list of merged, closed, and pending pull requests.</p>"
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>If you want to <strong>report a bug</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think is wrong with Behavioral-Responses.</p> <p>If you want to <strong>request an enhancement</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think should be added to Behavioral-Responses.</p> <p>If you want to <strong>propose code changes</strong>, follow the directions in the <a href=\"https://github.com/PSLmodels/Tax-Calculator/blob/master/CONTRIBUTING.md#tax-calculator-contributor-guide\">Tax-Calculator contributor guide</a> on how to fork and clone the Behavioral-Responses git repository. Before developing any code changes be sure to read completely the Tax-Calculator contributor guide and then read about the <a href=\"https://github.com/PSLmodels/Tax-Calculator/blob/master/WORKFLOW.md#tax-calculator-pull-request-workflow\">Tax-Calculator pull-request workflow</a>. When reading both documents, be sure to mentally substitute Behavioral-Response for Tax-Calculator and behresp for taxcalc.</p> <p>The Behavioral-Responses <a href=\"https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md#tax-calculator-release-history\">release history</a> provides a high-level summary of past pull requests and access to a complete list of merged, closed, and pending pull requests.</p>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://www.ospc.org/taxbrain/\">https://www.ospc.org/taxbrain/</a>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">https://github.com/PSLmodels/Behavioral-Responses/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">https://github.com/PSLmodels/Behavioral-Responses/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Matt Jensen</li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests\">https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests</a>"
        },
        "integration_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests\">https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests</a>"
        }
    },
    "Cost-of-Capital-Calculator": {
        "name": {
            "value": "Cost-of-Capital-Calculator",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator",
            "value": "<p>Evaluates the effect of US federal taxes on businesses' investment incentives</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/blob/master/README.md",
            "value": "<p>Cost-of-Capital-Calculator is a model that can be used to evaluate the effect of US federal taxes on the investment incentives of corporate and non-corporate businesses.  Specifically, Cost-of-Capital-Calculator uses data on the business assets and financial policy, as well as microdata on individual tax filers, to compute marginal effective tax rates on new investments.  In modeling the effects of changes to the individual income tax code, Cost-of-Capital-Calculator works with <a href=\"https://github.com/PSLmodels/tax-calculator\">Tax-Calculator</a>, another open source model of US federal tax policy.  Cost-of-Capital-Calculator is written in Python, an interpreted language that can execute on Windows, Mac, or Linux.</p>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/blob/master/README.md",
            "value": "<p>Cost-of-Capital-Calculator (Version 1.2.6)[Source code], https://github.com/PSLmodels/Cost-of-Capital-Calculator</p>"
        },
        "license": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/blob/master/docs/book/content/license.md",
            "value": "<p>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication</p>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://ccc.pslmodels.org/\">http://ccc.pslmodels.org/content/intro.html/</a>"
        },
        "user_changelog": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": null,
            "value": null
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/blob/master/README.md",
            "value": "<p>Results will change as the underlying models improve. A fundamental reason for adopting open source methods in this project is so that people from all backgrounds can contribute to the models that our society uses to assess economic policy; when community-contributed improvements are incorporated, the model will produce different results.</p>"
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": null,
            "value": null
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/blob/master/README.md",
            "value": "<p>There are two common ways to get started with Cost-of-Capital-Calculator:</p> <p>The <strong>first way</strong> to use Cost-of-Capital-Calculator is to download the source code and install the model on your machine.  To do this, follow the following instructions:</p> <ul> <li> <p>Install the <a href=\"https://www.anaconda.com/distribution/\">Anaconda distribution</a> of Python</p> </li> <li> <p>Clone this repository to a directory on your computer</p> </li> <li> <p>From the terminal (or Conda command prompt), navigate to the directory to which you cloned this repository and run <code>conda env create -f environment.yml</code></p> </li> <li> <p>Then, <code>conda activate ccc-dev</code></p> </li> <li> <p>Run the model with an example reform from terminal/command prompt by typing <code>python example.py</code></p> </li> <li> <p>You can adjust the <code>example.py</code> by adjusting the individual income tax reform (using a dictionary or JSON file in a format that is consistent with <a href=\"https://github.com/PSLmodels/Tax-Calculator\">Tax Calculator</a>) or other model parameters specified in the <code>business_tax_adjustments</code> dictionary.</p> </li> <li> <p>Model outputs will be saved in the following files:</p> <ul> <li><code>./baseline_byasset.csv</code><ul> <li>Cost of capital, marginal effective tax rates, effective average tax rates, and other model output for the baseline policy, organized by asset.</li> </ul> </li> <li><code>./baseline_byindustry.csv</code><ul> <li>Cost of capital, marginal effective tax rates, effective average tax rates, and other model output for the baseline policy, organized by production industry.</li> </ul> </li> <li><code>./reform_byasset.csv</code><ul> <li>Cost of capital, marginal effective tax rates, effective average tax rates, and other model output for the reform policy, organized by asset.</li> </ul> </li> <li><code>./reform_byindustry.csv</code><ul> <li>Cost of capital, marginal effective tax rates, effective average tax rates, and other model output for the refrom policy, organized by production industry.</li> </ul> </li> <li><code>./changed_byasset.csv</code><ul> <li>Differences in cost of capital, marginal effective tax rates, effective average tax rates, and other model output between the baseline and reform reform policies, organized by asset.</li> </ul> </li> <li><code>./changed_byindustry.csv</code><ul> <li>Differences in cost of capital, marginal effective tax rates, effective average tax rates, and other model output between the baseline and reform reform policies, organized by production industry.</li> </ul> </li> </ul> </li> </ul> <p>The CSV output files can be compared to the <code>./example_output/*_expected.csv</code> files that are checked into the repository to confirm that you are generating the expected output.  The easiest way to do this is to use the <code>./example-diffs</code> command (or <code>example-diffs</code> on Windows).  If you run into errors running the example script, please open a new issue in the Cost-of-Capital-Calculator repo with a description of the issue and any relevant tracebacks you receive.</p> <p>As an alternative to the second and third steps above, one can download the <code>CCC</code> package directly from Anaconda with the command <code>conda install -c conda-forge ccc</code>.</p> <p>The <strong>second way</strong> to use Cost-of-Capital-Calculator is through a web application, <a href=\"https://compute.studio/PSLmodels/Cost-of-Capital-Calculator/\">Cost of Capital Calculator</a>.  This way allows you to generate estimates of marginal effective tax rates and the cost of capital across production industries, type of asset, and separately for corporate and non-corporate entites and different forms of financing.  The web application is limited in that you cannot consider policy reforms to the individual income tax code.</p> <p>Of course, you can get started with Cost-of-Capital-Calculator both ways.</p>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://compute.studio/PSLmodels/Cost-of-Capital-Calculator/\">https://compute.studio/PSLmodels/Cost-of-Capital-Calculator/</a>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Cost-of-Capital-Calculator/issues\">https://github.com/PSLmodels/Cost-of-Capital-Calculator/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Cost-of-Capital-Calculator/issues\">https://github.com/PSLmodels/Cost-of-Capital-Calculator/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li><a href=\"http://jasondebacker.com\">Jason DeBacker</a></li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Cost-of-Capital-Calculator/tree/master/ccc/tests\">https://github.com/PSLmodels/Cost-of-Capital-Calculator/tree/master/ccc/tests</a>"
        },
        "integration_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Cost-of-Capital-Calculator/tree/master/ccc/tests\">https://github.com/PSLmodels/Cost-of-Capital-Calculator/tree/master/ccc/tests</a>"
        }
    },
    "microdf": {
        "name": {
            "value": "microdf",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>microdf is a Python package for analyzing economic microdata as pandas DataFrames, with special functions for Tax-Calculator.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/microdf\">What is microdf?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Max Ghenis</li><ul><li>email: max@ubicenter.org</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://pslmodels.github.io/microdf/\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"http://github.com/PSLmodels/microdf/\"></a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/microdf/releases\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        }
    },
    "OG-USA": {
        "name": {
            "value": "OG-USA",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/OG-USA",
            "value": "<p>Overlapping-Generations Model for Evaluating Fiscal Policy in the United States</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/OG-USA/blob/master/README.md",
            "value": "<p>OG-USA is an overlapping-generations (OG) model of the economy of the United States (USA) that allows for dynamic general equilibrium analysis of federal tax policy. The model output focuses changes in macroeconomic aggregates (GDP, investment, consumption), wages, interest rates, and the stream of tax revenues over time. Regularly updated documentation of the model theory--its output, and solution method--and the Python API is available <a href=\"https://pslmodels.github.io/OG-USA\">here</a>.</p>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/OG-USA#citing-og-usa",
            "value": "<p>Please cite the source of your analysis as \"OG-USA release #.#.#, author's calculations.\" If you wish to link to OG-USA, https://github.com/PSLmodels/OG-USA is preferred. Additionally, we strongly recommend that you describe the input data used, and provide a link to the materials required to replicate your analysis or, at least, note that those materials are available upon request.</p>"
        },
        "license": {
            "source": "https://github.com/PSLmodels/OG-USA/blob/master/LICENSE.md",
            "value": "<p>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication"
        },
        "user_documentation": {
            "source": "https://github.com/PSLmodels/OG-USA/blob/master/docs/OGUSAdoc.pdf",
            "value": "<a href=\"https://github.com/PSLmodels/OG-USA/blob/master/docs/OGUSAdoc.pdf\">User documentation</a>"
        },
        "user_changelog": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": null,
            "value": null
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/OG-USA/blob/master/README.md",
            "value": "<p>The model is currently under development. Users should be forewarned that the model components could change significantly. Therefore, there is NO GUARANTEE OF ACCURACY. THE CODE SHOULD NOT CURRENTLY BE USED FOR PUBLICATIONS, JOURNAL ARTICLES, OR RESEARCH PURPOSES. Essentially, you should assume the calculations are unreliable until we finish the code re-architecture and have checked the results against other existing implementations of the tax code. The package will have released versions, which will be checked against existing code prior to release. Stay tuned for an upcoming release!</p>"
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/OG-USA#usingcontributing-to-og-usa",
            "value": "<p>If you want to report a <b>bug</b>, create a new issue <a href=\"https://github.com/PSLmodels/OG-USA/issues\">here</a> providing details on what you think is wrong with OG-USA.</p><p>If you want to request <b>an enhancement</b>, create a new issue <a href=\"https://github.com/PSLmodels/OG-USA/issues\">here</a> providing details on what you think should be added to OG-USA. </p>"
        },
        "contributor_guide": {
            "source": null,
            "value": null
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/OG-USA/issues\">https://github.com/PSLmodels/OG-USA/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/OG-USA/issues\">https://github.com/PSLmodels/OG-USA/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li><a href=\"https://sites.google.com/site/rickecon/\">Richard Evans</a></li><li><a href=\"http://jasondebacker.com\">Jason DeBacker</a></li></ul>"
        },
        "unit_test": {
            "source": "https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests",
            "value": "<a href=\"https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests\">https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests</a>"
        },
        "integration_test": {
            "source": "https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests",
            "value": "<a href=\"https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests\">https://github.com/PSLmodels/OG-USA/tree/master/ogusa/tests</a>"
        }
    },
    "openfisca-uk": {
        "name": {
            "value": "openfisca-uk",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>OpenFisca-UK is a static microsimulation model of the UK Tax-Benefit system using the OpenFisca framework.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/openfisca-uk\">What is OpenFisca-UK?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Nikhil Woodruff</li><ul><li>email: nikhil.woodruff@ubicenter.org</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/openfisca-uk/blob/master/docs/\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/openfisca-uk\"></a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/openfisca-uk/blob/master/CHANGELOG.md\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        }
    },
    "ParamTools": {
        "name": {
            "value": "ParamTools",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/ParamTools",
            "value": "<p>Library for parameter processing and validation with a focus on computational modeling projects</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/README.md",
            "value": "<p><strong>Define, update, and validate your model's parameters.</strong></p> <p>Install using pip:</p> <p><code>pip install paramtools</code></p> <p>Install using conda:</p> <p><code>conda install -c conda-forge paramtools</code></p> <h5>Usage</h5> <p>Subclass <code>paramtools.Parameters</code> and define your model's <a href=\"https://paramtools.dev/parameters\">parameters</a>:</p> <p>```python import paramtools</p> <p>class Params(paramtools.Parameters):     defaults = {         \"schema\": {             \"labels\": {                 \"date\": {                     \"type\": \"date\",                     \"validators\": {                         \"range\": {                             \"min\": \"2020-01-01\",                             \"max\": \"2021-01-01\",                             \"step\": {\"months\": 1}                         }                     }                 }             },         },         \"a\": {             \"title\": \"A\",             \"type\": \"int\",             \"value\": [                 {\"date\": \"2020-01-01\", \"value\": 2},                 {\"date\": \"2020-10-01\", \"value\": 8},             ],             \"validators\": {                 \"range\" : {                     \"min\": 0, \"max\": \"b\"                 }             }         },         \"b\": {             \"title\": \"B\",             \"type\": \"float\",             \"value\": [{\"date\": \"2020-01-01\", \"value\": 10.5}]         }     } ```</p> <h3>Access parameter values</h3> <p>Access values using <code>.sel</code>:</p> <p>```python params = Params()</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 10, 1), 'value': 8}, ]) </code></pre> <p>Look up parameter values using a pandas-like api:</p> <p>```python from datetime import date</p> <p>result = params.sel[\"a\"][\"date\"] == date(2020, 1, 1) result ```</p> <pre><code>QueryResult([   {'date': datetime.date(2020, 1, 1), 'value': 2} ]) </code></pre> <p><code>python result.isel[0][\"value\"]</code></p> <pre><code>2 </code></pre> <h3>Adjust and validate parameter values</h3> <p>Add a new value:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-11-01\", \"value\": 22}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 22}, ]) </code></pre> <p>Update an existing value:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 3}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 3},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 22}, ]) </code></pre> <p>Update all values:</p> <p>```python params.adjust({\"a\": 7})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 7},   {'date': datetime.date(2020, 10, 1), 'value': 7},   {'date': datetime.date(2020, 11, 1), 'value': 7}, ]) </code></pre> <p>Errors on values that are out of range:</p> <p><code>python params.adjust({\"a\": -1})</code></p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-8-f8f1b7f6cd9a&gt; in &lt;module&gt;     ----&gt; 1 params.adjust({\"a\": -1})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"a\": [             \"a -1 &lt; min 0 \"         ]     } } </code></pre> <p>```python params = Params()</p> <p>params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 11}]}) ```</p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-9-cc8a21f044d8&gt; in &lt;module&gt;       1 params = Params()       2     ----&gt; 3 params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 11}]})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"a\": [             \"a[date=2020-01-01] 11 &gt; max 10.5 b[date=2020-01-01]\"         ]     } } </code></pre> <p>Errors on invalid values:</p> <p>```python params = Params()</p> <p>params.adjust({\"b\": \"abc\"}) ```</p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-10-8373a2715e38&gt; in &lt;module&gt;       1 params = Params()       2     ----&gt; 3 params.adjust({\"b\": \"abc\"})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"b\": [             \"Not a valid number: abc.\"         ]     } } </code></pre> <h3>Extend parameter values using label definitions</h3> <p>Extend values using <code>label_to_extend</code>:</p> <p><code>python params = Params(label_to_extend=\"date\")</code></p> <p><code>python params.sel[\"a\"]</code></p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 5, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True}, ]) </code></pre> <p>Updates to values are carried through to future dates:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-4-01\", \"value\": 9}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 9},   {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 11, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 9, '_auto': True}, ]) </code></pre> <p>Use <code>clobber</code> to only update values that were set automatically:</p> <p>```python params = Params(label_to_extend=\"date\") params.adjust(     {\"a\": [{\"date\": \"2020-4-01\", \"value\": 9}]},     clobber=False, )</p> <h1>Sort parameter values by date for nicer output</h1> <p>params.sort_values() params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 9},   {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True}, ]) </code></pre> <h3>NumPy integration</h3> <p>Access values as NumPy arrays with <code>array_first</code>:</p> <p>```python params = Params(label_to_extend=\"date\", array_first=True)</p> <p>params.a ```</p> <pre><code>array([2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8]) </code></pre> <p><code>python params.a * params.b</code></p> <pre><code>array([21., 21., 21., 21., 21., 21., 21., 21., 21., 84., 84., 84., 84.]) </code></pre> <p>Only get the values that you want:</p> <p><code>python arr = params.to_array(\"a\", date=[\"2020-01-01\", \"2020-11-01\"]) arr</code></p> <pre><code>array([2, 8]) </code></pre> <p>Go back to a list of dictionaries:</p> <p><code>python params.from_array(\"a\", arr, date=[\"2020-01-01\", \"2020-11-01\"])</code></p> <pre><code>[{'date': datetime.date(2020, 1, 1), 'value': 2},  {'date': datetime.date(2020, 11, 1), 'value': 8}] </code></pre> <h5>Documentation</h5> <p>Full documentation available at <a href=\"https://paramtools.dev\">paramtools.dev</a>.</p> <h5>Contributing</h5> <p>Contributions are welcome! Checkout <a href=\"https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a> to get started.</p> <h5>Credits</h5> <p>ParamTools is built on top of the excellent <a href=\"https://github.com/marshmallow-code/marshmallow\">marshmallow</a> JSON schema and validation framework. I encourage everyone to check out their repo and documentation. ParamTools was modeled off of <a href=\"https://github.com/PSLmodels/Tax-Calculator\">Tax-Calculator's</a> parameter processing and validation engine due to its maturity and sophisticated capabilities.</p>"
        },
        "citation": {
            "source": null,
            "value": null
        },
        "license": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/LICENSE.txt",
            "value": "<p>MIT</p>"
        },
        "user_documentation": {
            "source": "https://paramtools.dev",
            "value": "<a href=\"https://paramtools.dev\">https://paramtools.dev</a>"
        },
        "user_changelog": {
            "source": "https://github.com/PSLmodels/ParamTools/releases",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases\">https://github.com/PSLmodels/ParamTools/releases</a>"
        },
        "user_changelog_recent": {
            "source": "https://github.com/PSLmodels/ParamTools/releases/latest",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases/latest\">https://github.com/PSLmodels/ParamTools/releases/latest</a>"
        },
        "dev_changelog": {
            "source": "https://github.com/PSLmodels/ParamTools/releases",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases\">https://github.com/PSLmodels/ParamTools/releases</a>"
        },
        "disclaimer": {
            "source": null,
            "value": null
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md",
            "value": "<p>Contributions are welcome! Open a <a href=\"https://github.com/PSLmodels/ParamTools/pulls\">PR</a> with your changes (and tests to go along with them!). In this PR describe what your change does and link to any relevant issues.</p> <h5>Feature Requests</h5> <p>Please open an <a href=\"https://github.com/PSLmodels/ParamTools/issues\">issue</a> describing the feature and its potential use cases.</p> <h5>Bug Reports</h5> <p>Please open an <a href=\"https://github.com/PSLmodels/ParamTools/issues\">issue</a> describing the bug.</p>"
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md\">https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md</a>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/issues\">https://github.com/PSLmodels/ParamTools/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/issues\">https://github.com/PSLmodels/ParamTools/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Hank Doupe</li></ul>"
        },
        "unit_test": {
            "source": "https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests\">https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests</a>"
        },
        "integration_test": {
            "source": "https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests\">https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests</a>"
        }
    },
    "PCI-China": {
        "name": {
            "value": "PCI-China",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>A machine learning project that analyzes state-run media to predict policy changes.</p>"
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>China's industrialization process has long been a product of government direction, be it coercive central planning or ambitious industrial policy. For the first time in the literature, we develop a quantitative indicator of China's policy priorities over a long period of time, which we call the Policy Change Index for China (PCI-China). The PCI-China is a leading indicator that runs from 1951 to the most recent quarter and can be updated in the future. In other words, the PCI-China not only helps us understand the past of China's industrialization but also allows us to make short-term predictions about its future directions.</p> <p>The design of the PCI-China has two building blocks: (1) it takes as input data the full text of the <em>People's Daily</em> --- the official newspaper of the Communist Party of China --- since it was founded in 1946; (2) it employs a set of machine learning techniques to \"read\" the articles and detect changes in the way the newspaper prioritizes policy issues.</p> <p>The source of the PCI-China's predictive power rests on the fact that the <em>People's Daily</em> is at the nerve center of China's propaganda system and that propaganda changes often precede policy changes. Before the great transformation from the central planning under Mao to the economic reform program after Mao, for example, considerable efforts were made by the Chinese government to promote the idea of reform, move public opinion, and mobilize resources toward the new agenda. Therefore, by detecting (real-time) changes in propaganda, the PCI-China is, effectively, predicting (future) changes in policy.</p> <p>For details about the methodology and findings of this project, please see the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>Please cite the source of the latest PCI-China by the website: https://policychangeindex.org.</p> <p>For academic work, please cite the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "license": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/LICENSE.md\">GNU Affero General Public License v3.0</a>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/README.md\">PCI User Documentation</a>"
        },
        "user_changelog": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/CHANGES.md\">PCI Change History</a>"
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>Results will change as the underlying models improve. A fundamental reason for adopting open source methods in this project is so that people from all backgrounds can contribute to the models that our society uses to assess and predict changes in public policy; when community-contributed improvements are incorporated, the model will produce better results.</p>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/issues\">Issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/issues\">Issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Julian TszKin Chan</li><li>Weifeng Zhong</li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/tree/master/PCI-China/tests\">PCI unit tests</a>"
        },
        "integration_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/tree/master/PCI-China/tests\">PCI integration test</a>"
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>The first step for everyone (users and developers) is to open a free GitHub account. And then you can specify how you want to \"watch\" the PCI-China repository by clicking on the Watch button in the upper-right corner of the repository's main page.</p> <p>The second step is to get familiar with the PCI-China repository by reading the documentation.</p> <p>If you want to ask a question or report a bug, create a new issue <a href=\"https://github.com/PSLmodels/PCI-China/issues\">here</a> and post your question or tell us what you think is wrong with the repository.</p> <p>If you want to request an enhancement, create a new issue <a href=\"https://github.com/PSLmodels/PCI-China/issues\">here</a> and provide details on what you think should be added to the repository.</p> <h5>Installation Guide</h5> <p>First, install the dependencies and set up the proper environment by running the following command in the shell:</p> <p><code>{shell} ./PCI-China&gt;conda env create -f environment.yml</code></p> <p>Second, activate the new environment <code>pci_env</code>:</p> <p><code>{shell} ./PCI-China&gt;conda activate pci_env</code></p> <p>Third, run the following in the <code>pci_env</code> environment:</p> <p><code>{shell} ./PCI-China&gt;sh run_all.sh</code></p> <p>The above command will perform the following tasks: (1) processing data, (2) training models for two-, five-, and ten-year rolling windows, (3) compiling results, (4) creating text output, and (5) visualizing results.</p> <p>If you do not have the People's Daily data, you can run our tests which estimate a PCI using a simulated data set:</p> <p><code>{python} ./PCI-China&gt;pytest</code></p> <p>Notes</p> <ul> <li> <p>The default setting uses the first GPU to run the code. If you don't have a GPU, the code can be ran on CPU by changing the GPU setting to -1 (see details below)</p> </li> <li> <p>One of the package imported by PCI (jieba-fast) requires <a href=\"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\">Visual Studio C++ Build Tools</a>. Please checkout jieba-fast's <a href=\"https://github.com/deepcs233/jieba_fast\">website</a> for details.</p> </li> </ul> <h5>Function Usage</h5> <p>The python and an R script listed below are contained in the <code>run_all.sh</code> file. They are available for users to perform the following tasks, respectively.</p> <ul> <li> <p><code>proc_pd.py</code>:             Process and prepare the raw data from the <em>People's Daily</em> for building the neural network models.</p> </li> <li> <p><code>pci.py</code>:                 Train a neural network model to construct the PCI-China for a specified year-quarter, using a specified rolling window length.</p> </li> <li> <p><code>compile_tuning.py</code>:      Compile the results from all models and export them to a <code>.csv</code> file.</p> </li> <li> <p><code>create_text_output.py</code>:  Generate the raw data together with the model's classification result for each article in a specified year-quarter.</p> </li> <li> <p><code>gen_figures.R</code>:          Generate figures.</p> </li> <li> <p><code>create_plotly.py</code>:       Create an interactive Plotly figure.</p> </li> </ul> <p>For the <code>pci.py</code> file, users can also check out the descriptions of the arguments for the function using the <code>--help</code> option:</p> <p>```{shell} ./PCI-China&gt;python pci.py --help Using TensorFlow backend. usage: pci.py [-h] [--model MODEL] [--year YEAR] [--month MONTH] [--gpu GPU]               [--iterator ITERATOR] [--root ROOT] [--temperature TEMPERATURE]               [--discount DISCOUNT] [--bandwidth BANDWIDTH]</p> <p>optional arguments:     -h, --help            show this help message and exit     --model MODEL         Model name: window_5_years_quarterly,                         window_10_years_quarterly, window_2_years_quarterly     --year YEAR           Target year     --month MONTH         Target month     --gpu GPU             Which gpu to use     --iterator ITERATOR   Iterator in simulated annealing     --root ROOT           Root directory     --temperature TEMPERATURE                         Temperature in simulated annealing     --discount DISCOUNT   Discount factor in simulated annealing     --bandwidth BANDWIDTH                         Bandwidth in simulated annealing ```</p> <h5>Data</h5> <p>The raw data of the <em>People's Daily</em>, which are not provided in this repository, should be placed in the sub-folder <code>PCI-China/Input/pd/</code>. Each file in this sub-folder should contain one year-quarter of data, be named by the respective year-quarter, and be in the <code>.pkl</code> format. For example, the raw data for the first quarter of 2018 should be in the file <code>2018_Q1.pkl</code>. Below is the list of column names and types of each raw data file:</p> <p>```{python}</p> <blockquote> <blockquote> <blockquote> <p>df1 = pd.read_pickle(\"./PCI-China/Input/pd/pd_1946_1975.pkl\") df1.dtypes date     datetime64[ns] year              int64 month             int64 day               int64 page              int64 title            object body             object id                int64 dtype: object ```</p> </blockquote> </blockquote> </blockquote> <p>where <code>title</code> and <code>body</code> are the Chinese texts of the title and body of each article.</p> <p>The processed data of the <em>People's Daily</em>, which are not provided in this repository, should be placed in the sub-folder <code>PCI-China/data/Output/database.db</code>. The file is in SQLite format. The schema of the database is shown as the table below:</p> <p>```{python} import sqlite3 import pandas as pd </p> <p>conn = sqlite3.connect(\"data/output/database.db\") pd.read_sql_query(\"PRAGMA TABLE_INFO(main)\", conn) ```</p> <table border=\"1\" class=\"dataframe\">   <thead>     <tr style=\"text-align: right;\">       <th></th>       <th>cid</th>       <th>name</th>       <th>type</th>       <th>notnull</th>       <th>dflt_value</th>       <th>pk</th>     </tr>   </thead>   <tbody>     <tr>       <th>0</th>       <td>0</td>       <td>date</td>       <td>TIMESTAMP</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>1</th>       <td>1</td>       <td>id</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>2</th>       <td>2</td>       <td>page</td>       <td>REAL</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>3</th>       <td>3</td>       <td>title</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>4</th>       <td>4</td>       <td>body</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>5</th>       <td>5</td>       <td>strata</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>6</th>       <td>6</td>       <td>title_seg</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>7</th>       <td>7</td>       <td>body_seg</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>8</th>       <td>8</td>       <td>year</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>9</th>       <td>9</td>       <td>quarter</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>10</th>       <td>10</td>       <td>month</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>11</th>       <td>11</td>       <td>day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>12</th>       <td>12</td>       <td>weekday</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>13</th>       <td>13</td>       <td>frontpage</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>14</th>       <td>14</td>       <td>page1to3</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>15</th>       <td>15</td>       <td>title_len</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>16</th>       <td>16</td>       <td>body_len</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>17</th>       <td>17</td>       <td>n_articles_that_day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>18</th>       <td>18</td>       <td>n_pages_that_day</td>       <td>REAL</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>19</th>       <td>19</td>       <td>n_frontpage_articles_that_day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>   </tbody> </table> </div> <p>where <code>title_int</code> and <code>body_int</code> are the word embeddings (numeric vectors) of the title and body of each article.</p> <p>The summary statistics for the processed data can be found in the following <code>.csv</code> file:</p> <p><a href=\"https://github.com/PSLmodels/PCI-China/blob/master/PCI-China/figures/Summary%20statistics.csv\">https://github.com/PSLmodels/PCI-China/blob/master/PCI-China/figures/Summary%20statistics.csv</a></p> <p>Neither the raw data nor the processed data of the <em>People's Daily</em> can be released by the authors. Users who have questions about applying the repository to their own data are welcome to contact the authors:</p> <ul> <li> <p><a href=\"https://sites.google.com/site/ctszkin/\">Julian TszKin Chan</a>: julian.chan [AT] policychangeindex.org;</p> </li> <li> <p><a href=\"https://www.weifengzhong.com\">Weifeng Zhong</a>: weifeng.zhong [AT] policychangeindex.org.</p> </li> </ul> <h5>Citing the PCI-China</h5> <p>Please cite the source of the latest PCI-China by the website: https://policychangeindex.org.</p> <p>For academic work, please cite the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": null,
            "value": null
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_guide": {
            "source": null,
            "value": null
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        }
    },
    "Tax-Brain": {
        "name": {
            "value": "Tax-Brain",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/Tax-Brain",
            "value": "<p>Integrator package for multiple open source tax models</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/README.md",
            "value": "<p>Tax-Brain makes it easy for users to simulate the US tax system by providing a single interface for multiple tax models. Currently, Tax-Brain interfaces with <a href=\"https://github.com/PSLmodels/Tax-Calculator\">Tax-Calculator</a> and <a href=\"https://github.com/PSLmodels/Behavioral-Responses\">Behavioral-Responses</a>. Additional models will be added in the near future to expand Tax-Brain's capabilities to include modeling business taxation and running dynamic general equilibrium simulations.</p> <p>To learn more about how Tax-Brain works, see <a href=\"http://taxbrain.pslmodels.org\">the Tax-Brain documentation</a>.</p>"
        },
        "citation": {
            "source": null,
            "value": null
        },
        "license": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/LICENSE.txt",
            "value": "<p>MIT</p>"
        },
        "user_documentation": {
            "source": "http://taxbrain.pslmodels.org/content/intro.html",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/blob/master/USAGE.md\">https://github.com/PSLmodels/Tax-Brain/blob/master/USAGE.md</a>"
        },
        "user_changelog": {
            "source": "https://github.com/PSLmodels/Tax-Brain/releases",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/releases\">https://github.com/PSLmodels/Tax-Brain/releases</a>"
        },
        "user_changelog_recent": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/RELEASES.md",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/releases/latest\">https://github.com/PSLmodels/Tax-Brain/releases/latest</a>"
        },
        "dev_changelog": {
            "source": "https://github.com/PSLmodels/Tax-Brain/releases",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/releases\">https://github.com/PSLmodels/Tax-Brain/releases</a>"
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/README.md",
            "value": "<p>Tax-brain and its underlying models are constantly being improved upon. For that reason, the results output by Tax-Brain may differ over time. It is strongly suggested that the user make note of which version of Tax-Brain, they are using when reporting their results.</p>"
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/ROADMAP.md",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/blob/master/ROADMAP.md\">https://github.com/PSLmodels/Tax-Brain/blob/master/ROADMAP.md</a>"
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/CONTRIBUTING.md",
            "value": "<p>Contributions to Tax-Brain are always welcome. To contribute, open a <a href=\"https://github.com/PSLmodels/Tax-Brain/pulls\">pull request (PR)</a> with your changes and any associated tests. In this PR, please describe what your change does and link to any relevant issues and discussions.</p> <h5>Feature Requests</h5> <p>To request a feature, please open an <a href=\"https://github.com/PSLmodels/Tax-Brain/issues\">issue</a> describing the desired feature and it's use cases.</p> <h5>Bug Reports</h5> <p>To report a bug in Tax-Brain, open an <a href=\"https://github.com/PSLmodels/Tax-Brain/issues\">issue</a> describing the bug. Please include the code needed to reproduce the bug.</p> <h5>Developer Setup</h5> <p>Start by forking and cloning the Tax-Brain repo. Next, run the following commands in the terminal to create and activate the developer conda environment:</p> <p><code>bash cd Tax-Brain conda env create -f environment.yml conda activate taxbrain-dev</code></p>"
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/Tax-Brain/blob/master/CONTRIBUTING.md",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/blob/master/CONTRIBUTING.md\">https://github.com/PSLmodels/Tax-Brain/blob/master/CONTRIBUTING.md</a>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://www.compmodels.org/PSLmodels/Tax-Brain/\">Tax-Brain</a>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/issues\">https://github.com/PSLmodels/Tax-Brain/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/issues\">https://github.com/PSLmodels/Tax-Brain/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Anderson Frailey</li></ul>"
        },
        "unit_test": {
            "source": "https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests\">https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests</a>"
        },
        "integration_test": {
            "source": "https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests\">https://github.com/PSLmodels/Tax-Brain/tree/master/taxbrain/tests</a>"
        }
    },
    "Tax-Calculator": {
        "name": {
            "value": "Tax-Calculator",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>Tax-Calculator is an open-source microsimulation model for static analysis of USA federal income and payroll taxes.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://PSLmodels.github.io/Tax-Calculator/\">What is Tax-Calculator?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Jason DeBacker</li><li>Henry Doupe</li><li>Anderson Frailey</li><li>Matt Jensen</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://PSLmodels.github.io/Tax-Calculator/\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"https://pslmodels.github.io/Tax-Calculator/contributing/contributor_guide.html\"></a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": "<a href=\"https://pslmodels.github.io/Tax-Calculator/about/changes.html\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        }
    },
    "Tax-Cruncher": {
        "name": {
            "value": "Tax-Cruncher",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/Tax-Cruncher",
            "value": "<p>Calculates federal tax liabilities from individual data under different policy proposals</p>"
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/Tax-Cruncher/blob/master/README.md",
            "value": "<p>Tax-Cruncher calculates federal tax liabilities from individual data under different policy scenarios. </p> <p>Tax-Cruncher accepts inputs similar to NBER's <a href=\"https://users.nber.org/~taxsim/taxsim27/\">TAXSIM Version 27</a>, converts those inputs to a format usable by <a href=\"https://github.com/PSLmodels/Tax-Calculator\">Tax-Calculator</a>, and uses Tax-Calculator capabilities to analyze the user-provided data under various tax policy proposals.</p> <p>Tax-Cruncher's web application is hosted on <a href=\"https://compute.studio/PSLmodels/Tax-Cruncher/\">Compute Studio</a>. The code that powers the web application can be found in this repository in the <a href=\"https://github.com/PSLmodels/Tax-Cruncher/tree/master/cs-config\">cs-config</a> directory.</p>"
        },
        "user_documentation": {
            "source": "https://github.com/PSLmodels/Tax-Cruncher#how-to-use-tax-cruncher",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Cruncher#how-to-use-tax-cruncher\">https://github.com/PSLmodels/Tax-Cruncher#how-to-use-tax-cruncher</a>"
        },
        "user_changelog_recent": {
            "source": "https://github.com/PSLmodels/Tax-Cruncher/releases",
            "value": "<a href=\"https://github.com/PSLmodels/Tax-Cruncher/releases\">https://github.com/PSLmodels/Tax-Cruncher/releases</a>"
        },
        "contributor_overview": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://www.compmodels.org/PSLmodels/Tax-Cruncher/\">Tax-Cruncher</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Peter Metz</li></ul>"
        }
    },
    "taxdata": {
        "name": {
            "value": "taxdata",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>The TaxData project prepares microdata files to be used by Tax-Calculator</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/taxdata/blob/master/README.md\">TaxData Overview</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Anderson Frailey</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/taxdata/tree/master/doc\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/taxdata/blob/master/CONTRIBUTING.md\"></a>"
        },
        "user_changelog": {
            "source": "https://github.com/PSLmodels/taxdata/releases",
            "value": "<a href=\"https://github.com/PSLmodels/taxdata/releases\">https://github.com/PSLmodels/taxdata/releases</a>"
        },
        "user_changelog_recent": {
            "source": "https://github.com/PSLmodels/taxdata/releases",
            "value": "<a href=\"https://github.com/PSLmodels/taxdata/releases\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        }
    }
}